---
- hosts: localhost
  connection: local

  vars:
    ansible_python_interpreter: /usr/bin/python3
    vpc_cidr_block: 172.20.4.0/22
    aws_region: eu-west-1
    vpc_name: ROSA-POC
    customer_gw_ip: 192.168.0.1
    on_prem_CIDR: 10.0.0.0/8

  tasks:
    - name: Create VPC
      ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr_block }}"
        region: "{{ aws_region }}"
      register: create_vpc

    - name: Set VPC ID
      set_fact:
        vpc_id: "{{ create_vpc.vpc.id }}"

    - name: Create Internet Gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc_id }}"
        state: present
      register: igw

    - name: Create VPN Gateway
      ec2_vpc_vgw:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id }}"
        name: '{{ vpc_name }}_VGW'
        type: ipsec.1
      register: vpn_gateway

    - name: Create Customer Gateway
      ec2_customer_gateway:
        bgp_asn: 65000
        ip_address: "{{ customer_gw_ip }}"
        name: '{{ vpc_name }}_VPN'
        region: "{{ aws_region }}"
      register: cgw_gateway

    - name: Set Customer Gateway ID
      set_fact:
        customer_gateway_id: "{{ cgw_gateway.gateway.customer_gateway.customer_gateway_id }}"

    - name: Create VPN Connection
      ec2_vpc_vpn:
        region: "{{ aws_region }}"
        static_only: true
        vpn_gateway_id: "{{ vpn_gateway.vgw.id }}"
        customer_gateway_id: "{{ customer_gateway_id }}"
        routes:
          - "{{ vpc_cidr_block }}"
      register: vpn_id

    - name: Create NAT Gateway Elastic IP
      ec2_eip:
        region: "{{ aws_region }}"
        state: present
      register: nat_eip

    - name: Create NAT Gateway
      ec2_vpc_nat_gateway:
        subnet_id: "{{ vpc_public_subnet_ids[0] }}"
        allocation_id: "{{ nat_eip.allocation_id }}"
        state: present
      register: nat_gateway

    - name: Create S3 VPC Endpoint
      ec2_vpc_endpoint:
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        service: "com.amazonaws.{{ aws_region }}.s3"
        route_table_ids: ["{{ private_route_table.route_table.id }}"]
        state: present
      register: s3_endpoint

    - name: Enable VPN CloudWatch Logging
      ec2_vpc_vpn_logging:
        vpn_connection_id: "{{ vpn_id.vpn_connection.vpn_connection_id }}"
        cloudwatch_log_group: "/aws/vpn/{{ vpc_name }}"
        enable_logging: true
        state: present
      register: vpn_logs

    - name: Create Security Group for VPN
      ec2_group:
        name: "{{ vpc_name }}-vpn-sg"
        description: "Allow VPN-related traffic"
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: all
            cidr_ip: "{{ on_prem_CIDR }}"
            rule_desc: "Allow all traffic from on-prem network"
        state: present
      register: vpn_sg

    - name: Launch Bastion Host
      ec2_instance:
        name: "{{ vpc_name }}-bastion"
        region: "{{ aws_region }}"
        key_name: my-keypair
        instance_type: t3.micro
        image_id: ami-12345678  # Replace with the correct AMI
        vpc_subnet_id: "{{ vpc_public_subnet_ids[0] }}"
        security_groups: ["{{ vpn_sg.group_id }}"]
        state: present
      register: bastion_host

    - name: Create AWS Transit Gateway
      ec2_transit_gateway:
        region: "{{ aws_region }}"
        state: present
        description: "Transit Gateway for {{ vpc_name }}"
      register: transit_gateway

    - name: Create AWS Backup Vault
      aws_backup_vault:
        name: "{{ vpc_name }}-backup-vault"
        region: "{{ aws_region }}"
        state: present

    - name: Create Backup Plan for VPN & EC2
      aws_backup_plan:
        name: "{{ vpc_name }}-backup-plan"
        rules:
          - rule_name: DailyBackup
            schedule_expression: "cron(0 12 * * ? *)"
            lifecycle:
              delete_after_days: 30
        region: "{{ aws_region }}"
        state: present

    - name: Create Route 53 Private Hosted Zone
      route53_zone:
        name: "internal.{{ vpc_name }}.local"
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        state: present
      register: private_dns

    - name: Create VPN DNS Record
      route53_record:
        zone: "{{ private_dns.zone.id }}"
        record: "vpn.internal.{{ vpc_name }}.local"
        type: A
        value: "{{ vpn_id.vpn_connection.customer_gateway_configuration.tunnel_outside_address }}"
        state: present
